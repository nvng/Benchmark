syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

// 约定，req和ack消息ID一致。
// 约定，mainType 0为内部消息，subType 0为心跳。

enum EMsgInternalMainType
{
  E_MIMT_Internal = 0x0; // 内部消息
  E_MIMT_DB = 0x7fb;
  E_MIMT_GameCommon = 0x7fc;
  E_MIMT_Game = 0x7fd;
  E_MIMT_MatchCommon = 0x7fe; // 比赛
  E_MIMT_Match = 0x7ff; // 比赛
}

enum EMsgInternalInternalSubType
{
  E_MIIST_HeartBeat = 0x0; // 心跳
  E_MIIST_ServerInit = 0x1;
  E_MIIST_MultiCast = 0x2;
  E_MIIST_BroadCast = 0x3;

  E_MIIST_Init = 0x4;
  E_MIIST_GameServerDisconnect = 0x5;
  E_MIIST_LobbyServerDisconnect = 0x6;
  E_MIIST_PlayerReconnect = 0x7;
  E_MIIST_ClientReconnect = 0x8;
}

enum EMsgInternalGameCommonSubType
{
  E_MIGCST_SwitchRegion = 0x0;

  E_MIGCST_ReqEnterRegion = 0x1;
  E_MIGCST_ReqEnterRegionRet = 0x2;
  E_MIGCST_ReqExit = 0x3;
  E_MIGCST_ReqQueue = 0x4; // 请求排队。
  E_MIGCST_ExitQueue = 0x5; // 退出排队。

  E_MIGCST_Reconnect = 0x6;
  E_MIGCST_Disconnect = 0x7;

  E_MIGCST_RegionCreate = 0x8;
  E_MIGCST_RegionDestroy = 0x9;
  E_MIGCST_RegionKickout = 0xa;

  E_MIGCST_SyncRegionEnterCond = 0x10;
  E_MIGCST_Conclude = 0x11;
  E_MIGCST_ReqRegionRelationList = 0x12;

  E_MIGCST_SyncPlayerInfo = 0x1f;
}

// vim: fenc=utf8:expandtab:ts=8
