syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

// 约定，req和ack消息ID一致。
// 约定，mainType 0为内部消息，subType 0为心跳。

enum EMsgInternalMainType
{
  E_MIMT_Internal = 0x0; // 服务器间内部消息

  E_MIMT_DB = 0x7e8;

  E_MIMT_Robot = 0x7e9;
  E_MIMT_QueueCommon = 0x7ea;
  E_MIMT_Queue = 0x7eb;
  E_MIMT_GameCommon = 0x7ec;
  E_MIMT_Game = 0x7ed;
  E_MIMT_MatchCommon = 0x7ee; // 比赛
  E_MIMT_Match = 0x7ef; // 比赛

  E_MIMT_Local = 0x7ff; // 本地消息。
}

enum EMsgInternalLocalSubType
{
  E_MILST_Disconnect = 0x0;
  E_MILST_Reconnect = 0x1;
  E_MILST_Init = 0x2;
  E_MILST_DayChange = 0x3;
  E_MILST_DataResetNoneZero = 0x4;
  E_MILST_Terminate = 0x5;
}

enum EMsgInternalInternalSubType
{
  E_MIIST_HeartBeat = 0x0; // 心跳
  E_MIIST_ServerInit = 0x1;
  E_MIIST_MultiCast = 0x2;
  E_MIIST_BroadCast = 0x3;
  E_MIIST_BroadCastAll = 0x4;
  E_MIIST_SyncRelation = 0x5;

  E_MIIST_Reconnect = 0x1b;
  E_MIIST_Result = 0x1c;
}

enum EMsgInternalRobotSubType
{
  E_MIRST_Req = 0x0;
  E_MIRST_Back = 0x1;
}

enum EMsgInternalQueueCommonSubType
{
  E_MIQCST_ReqQueue = 0x0; // 请求排队。
  E_MIQCST_ExitQueue = 0x1;
}

enum EMsgInternalGameCommonSubType
{
  // 约定：像排队一样异步，或不能在 E_MCMT_GameCommon 中的消息，才在这里。
  E_MIGCST_RegionCreate = 0x0;
  E_MIGCST_RegionDestroy = 0x1;
  E_MIGCST_RegionKickout = 0x2;

  E_MIGCST_SyncRegionEnterCond = 0x1e;
  E_MIGCST_SyncPlayerInfo2Region = 0x1f;
}

// vim: fenc=utf8:expandtab:ts=8
