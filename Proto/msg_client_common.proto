syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

import "msg_common.proto";

enum EClientErrorType
{
  E_CET_None = 0x0; // 0 不能作为有效值，ByteSize 为 0。
  E_CET_Success = 0x1;
  E_CET_Fail = 0x2;
  E_CET_StateError = 0x3; // 状态错误。

  E_CET_LoginFail = 0x4;
  E_CET_InLogin = 0x5;
  E_CET_ForeignLogin = 0x6;
  E_CET_GateAdd2GameFail = 0x7;

  E_CET_AlreadyInQueue = 0x10; // 已经在队列中。
  E_CET_QueueError = 0x11; // 排队出现错误。
  E_CET_AlreadyInRegion = 0x12;

  E_CET_ParamError = 0x20;
  E_CET_CfgNotFound = 0x21;
  E_CET_DropError = 0x22;
  E_CET_GoodsNotEnough = 0x23;

  E_CET_MailNotFound = 0x30;
  E_CET_MailAlreadyReward = 0x31;
  E_CET_MailTimeOut = 0x32;

  E_CET_GameSeasonLVError = 0x36;
  E_CET_GameSeasonLVRewardAlready = 0x37;
  E_CET_GameSeasonRewardTimeError = 0x38;
  E_CET_VIPAlreadyReward = 0x39;

  E_CET_ShopNotOpen = 0x40;
  E_CET_GoodsNotInTime = 0x41;
  E_CET_CoinsNotEnough = 0x42;
  E_CET_DiamondsNotEnough = 0x43;
  E_CET_MoneyNotEnough = 0x44;
  E_CET_ShopGoodsInLimit = 0x45;
  E_CET_ShopSubTypeNotFound = 0x46;
  E_CET_TimeLimit = 0x47;
  E_CET_MaxLimit = 0x48;
  E_CET_HeroTimeOut = 0x49;

  E_CET_RankTypeInValid = 0x50;
  E_CET_RegionNotFound = 0x51;
}

enum EPlayerAttrType
{
  E_PAT_TiLi = 0;
  E_PAT_Diamonds = 1;
  E_PAT_Coins = 2;
  E_PAT_Exp = 3;
  E_PAT_LV = 4;
  E_PAT_TiLiStartRecoverTime = 5;
  E_PAT_Location = 6;

  E_PAT_CreateTime = 7;
  E_PAT_LastLoginTime = 8;
  E_PAT_LastLogoutTime = 9;
  E_PAT_LastDayChangeResetTime = 10;
  E_PAT_LastNotZeroResetTime = 11;
}

message MsgUpdatePlayerAttr
{
  EPlayerAttrType type = 1;
  sint64 val = 2;
  sint64 val_1 = 3;
}

message MsgPlayerChange
{
  repeated MsgUpdatePlayerAttr change_attr_list = 1;
  repeated sint64 icon_idx_list = 2;

  MsgPlayerGameSeasonInfo game_season = 10;
  repeated MsgGoodsItem change_goods_list = 11;
  repeated MsgHero change_hero_list = 12;
}

message MsgBattleInfo
{
  sint64 game_cnt_total = 20; // 比赛场次。
  sint64 game_ranking_total = 30; // 总名次。累加，用于算平均名次。
  sint64 game_finished_cnt_total = 40; // 完成次数。
  sint64 champion_cnt = 50; // 冠军次数。

  sint64 gan_rao_cnt = 60;
  sint64 di_kang_gan_rao_cnt = 70;
  sint64 du_zhan_ao_tou_cnt = 80;
}

message MsgPlayerGameSeasonInfo
{
  sint64 season = 1;
  sint64 lv = 2;
  sint64 star = 3;
  sint64 score = 4;
  sint64 max_lv = 5;
  sint64 max_star = 6;
  sint64 cur_max_lv = 7;
  sint64 cur_max_star = 8;
  sint64 cur_season = 9;
  bool already_reward = 10;
  repeated sint64 reward_list = 20;
  repeated sint64 segment_level_reward_list = 21;
  MsgGameSeasonBattleStatisticsInfo cur_info = 22;
  MsgGameSeasonBattleStatisticsInfo total_info = 23;
}

message MsgGameSeasonBattleStatisticsInfo
{
  MsgBattleInfo battle_info = 10;
  sint64 continue_first = 20;
  sint64 max_continue_first = 30;

  message MsgBattleItemUseInfo
  {
    sint64 id = 10;
    sint64 cnt = 20;
  }
  repeated MsgBattleItemUseInfo battle_item_use_info_list = 100;
}

message MsgSysMailInfo
{
  sint64 id = 10;
  sint64 time = 20;
  string title = 30;
  string from = 40;
  string content = 50;
  repeated MsgGoodsItem goods_list = 60;
}

message MsgAD
{
  sint64 id = 10;
  sint64 cnt = 20;
}

message MsgADMgr
{
  repeated MsgAD item_list = 10;
}

message MsgHero
{
  sint64 id = 10;
  sint64 lv = 20;
  sint64 total_exp = 30;
  sint64 pi_fu = 40;
  sint64 battle_cnt = 50;
  sint64 score_cnt = 60;
  sint64 champion_cnt = 70;
  sint64 ti_yan_end_time = 80;
}

message MsgHeroMgr
{
  sint64 main_hero = 10;
  repeated MsgHero hero_list = 20;
}

enum EQueueType
{
  E_QT_None = 0x0;
  E_QT_Normal = 0x1;
  E_QT_Manual = 0x2; // 手动创建，手动开始。
}

message MsgPlayerQueueInfo
{
  repeated sint64 attr_list = 1;
  string nick_name = 2;
  bool is_main = 3;
  sint64 rank = 4;
}

// vim: fenc=utf8:expandtab:ts=8
