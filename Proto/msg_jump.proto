syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

package Jump;

import "msg_common.proto";
import "msg_client_common.proto";

enum EMsgClientGameSubType
{
        E_MCGST_Sync = 0x0;
        E_MCGST_UpdatePosInfo = 0x1;
        E_MCGST_PlayerPlayEnd = 0x2; // 玩家结束。
        E_MCGST_PlayEnd = 0x3; // 玩法结束。
        E_MCGST_LoadSuccess = 0x4;
        E_MCGST_ChangeAI = 0x5;
        E_MCGST_SyncClientInfo = 0x6;
}

enum ERegionStateType
{
        E_RST_None = 0;
        E_RST_Prepare = 1;
        E_RST_Timeout = 2;
        E_RST_Play = 3;
        E_RST_Conclude = 4;
}

message MsgRegionStateInfo
{
        ERegionType region_type = 1;
        sint64 cur_region_state_type = 2;
        double cur_region_state_end_time = 3;
}

message MsgPos
{
        sint64 x = 1;
        sint64 y = 2;
        sint64 z = 3;
}

message MsgFighterPosInfo
{
        sint64 guid = 1;
        sint64 type = 2;

        sint64 src_idx = 5;
        MsgPos src_pos = 6;
        sint64 src_hit = 7;

        sint64 dst_idx = 10;
        MsgPos dst_pos = 11;
        sint64 dst_time = 12;

        sint64 score = 20;
        sint64 press_time = 21;
        sint64 shield_end_time = 22;
        sint64 flag = 23;
        sint64 speed_pos_cnt = 24;
}

enum EFighterFlagType
{
        E_FFT_Speed = 0;
}

enum EFighterAttrType
{
        E_FAT_VipFlag = 0x0;
        E_FAT_GoodsCnt = 0x1;
}

message MsgFighterInfo
{
        sint64 guid = 1;
        sint64 lv = 2;
        string nick_name = 3;
        string icon = 4;
        sint64 flag = 5;
        sint64 camp = 6;
        sint64 hero_id = 7;
        repeated sint64 attr_list = 8;

        sint64 ai_bind_guid = 9;
        sint64 ai_action = 10;

        MsgFighterPosInfo pos_info = 20;
        sint64 end_time = 21;
        sint64 shield_end_time = 22;
        repeated sint64 battle_item_list = 23;
        sint64 speed_pos_cnt = 24;
        sint64 continue_center_cnt = 25;
        sint64 add_coins = 26;
        repeated sint64 pi_fu_list = 27;
}

message MsgFighterEnter
{
        ERegionType region_type = 1;
        sint64 region_id = 2;

        MsgFighterInfo fighter_info = 10;
}

message MsgRegionInfo
{
        ERegionType region_type = 1;
        sint64 region_id = 2;
        sint64 random_seed = 3;
        sint64 time = 4;
        sint64 pattarn_cfg_id = 5;

        MsgRegionStateInfo state_info = 10;
        repeated MsgFighterInfo fighter_list = 11;

        message MsgBattleItemInfo
        {
                sint64 id = 1;
                sint64 pos_idx = 2;
        }
        repeated MsgBattleItemInfo battle_item_list = 12;
        repeated MsgSync lattice_list = 13;
}

message MsgConcludeFighterInfo
{
        MsgFighterInfo fighter_info = 1;

        sint64 use_time = 2;
        sint64 score = 3;
        sint64 rank = 4;
        bool is_finish = 5;
        bool is_du_zhan_ao_tou = 6;
        sint64 di_kang_gan_rao_cnt = 7;
        sint64 add_coins = 8;
        sint64 param = 9;
        sint64 enter_time = 10;

        message MsgBattleItemInfo
        {
                sint64 id = 10;
                sint64 cnt = 20;
        }
        repeated MsgBattleItemInfo battle_item_use_list = 20;
        repeated MsgBattleItemInfo battle_item_hit_list = 21;

        repeated MsgConcludeFighterInfo robot_list = 30;
}

message MsgConcludeInfo
{
        map<sint64, MsgConcludeFighterInfo> fighter_list = 1;
        sint64 param = 2;
        sint64 param_1 = 3;

        MsgPlayerChange player_change = 10;
}

enum ESyncStateType
{
        E_SST_None = 0;
        E_SST_1 =  1; // 跳跃蓄力。
        E_SST_2 =  2; // 发射导弹。
        E_SST_3 =  3; // 发射飞弹。
        E_SST_4 =  4; // 受到爆炸。
        E_SST_5 =  5; // 发射香蕉皮。
        E_SST_6 =  6; // 受到香蕉皮打滑。
        E_SST_7 =  7; // 开启护盾。
        E_SST_8 =  8; // 正常关闭护盾。
        E_SST_9 =  9; // 开启加速。
        E_SST_10 = 10; // 关闭加速。
        E_SST_11 = 11; // 落地。
        E_SST_12 = 12; // 护盾消失。
        E_SST_ItemReady = 13;
        E_SST_14 = 14; // 水柱。
        E_SST_15 = 15; // 水柱击中。
        E_SST_16 = 16; // 传送带滑落。
        E_SST_17 = 17; // 同步分数。
}

message MsgSync
{
        EClientErrorType error_type = 1;
        sint64 state = 2;
        sint64 player_guid = 3;
        sint64 pos_idx = 4;
        sint64 time = 5;
        sint64 param_1 = 6;
        sint64 param_2 = 7;
        sint64 param_3 = 8;
}

message MsgPlayerPlayEnd
{
        sint64 player_guid = 1;
        sint64 end_time = 2;
}

message MailSyncPlayerInfo2RegionExtra
{
        sint64 hero_id = 1;
        sint64 rank_lv = 2;
        sint64 rank_star = 3;
        sint64 ai_id = 4;
        repeated sint64 attr_list = 5;
}

message MsgSyncClientInfo // 同步机器信息。
{
        sint64 guid = 1;
        sint64 core = 2;
}

message MsgChangeAI
{
        sint64 id = 1;
}

// vim: fenc=utf8:expandtab:ts=8:sw=8
