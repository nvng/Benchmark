syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

// 约定，req和ack消息ID一致。
// 约定，mainType 0为内部消息，subType 0为心跳。

enum EMsgClientMainType
{
  E_MCMT_Internal = 0x0;
  E_MCMT_Login = 0x1; // 登录相关。
  E_MCMT_ClientCommon = 0x2; // 大厅通用。
  E_MCMT_Client = 0x3; // 大厅。
  E_MCMT_Mail = 0x4;
  E_MCMT_Shop = 0x5;
  E_MCMT_VIP = 0x6;
  E_MCMT_AD = 0x7;
  E_MCMT_Rank = 0x8;
  E_MCMT_Hero = 0x9;
  E_MCMT_Achievement = 0xa;
  E_MCMT_Activity = 0xb;
  E_MCMT_CDKey = 0xc;

  E_MCMT_Announcement = 0xd;
  E_MCMT_Pay = 0xf9;
  E_MCMT_QueueCommon = 0xfa;
  E_MCMT_Queue = 0xfb;
  E_MCMT_GameCommon = 0xfc; // 场景基本操作。
  E_MCMT_Game = 0xfd; // 场景相关。
  E_MCMT_MatchCommon = 0xfe; // 比赛基本操作。
  E_MCMT_Match = 0xff; // 比赛相关。
}

enum EMsgClientInternalSubType
{
  E_MCIST_HeartBeat = 0x0; // 心跳
}

enum EMsgClientClientCommonSubType
{
  E_MCCCST_Login = 0x0; // 登录
  E_MCCCST_Logout = 0x1; // 登出
  E_MCCCST_Reconnect = 0x2; // 玩家重连。
  E_MCCCST_Disconnect = 0x3;
  E_MCCCST_Kickout = 0x4; // 踢人。
  E_MCCCST_DayChange = 0x5; // 跨天。
  E_MCCCST_DataResetNoneZero = 0x6; // 非零点数据重置。
  E_MCCCST_Result = 0x7; // 通用返回。
  E_MCCCST_CommitLocation = 0x8; // 设置位置信息。
  E_MCCCST_PlayerChange = 0x9;
}

enum EMsgClientClientSubType
{
  E_MCCST_GM = 0x0;
  E_MCCST_SyncIcon = 0x1;
  E_MCCST_ChangeNickName = 0x2;
  E_MCCST_ChangeIcon = 0x3;
  E_MCCST_ChangeIconFrame = 0x4;

  E_MCCST_SegmentLevelReward = 0x5;
  E_MCCST_GameSeasonJourneyReward = 0x6; // 领取段位奖励。
  E_MCCST_GameSeasonReward = 0x7; // 领取赛季奖励。
  E_MCCST_ReqGameSeasonInfo = 0x8; // 请求玩家赛季信息。

  E_MCCST_VIPReward = 0x9;
  E_MCCST_BagUse = 0xa;
  E_MCCST_BagRemove = 0xb;
  E_MCCST_BagSelect = 0xc;
}

enum EMsgClientQueueCommonSubType
{
  E_MCQCST_ReqQueue = 0x0; // 请求排队!!!
  E_MCQCST_ExitQueue = 0x1; // 退出排队!!!
  E_MCQCST_SyncQueueInfo = 0x2;
  E_MCQCST_Opt = 0x3;
  E_MCQCST_ReqQueueList = 0x4;
}

enum EMsgClientGameCommonSubType
{
  E_MCGCST_ReqEnterRegion = 0x0; // 请求进入场景。
  E_MCGCST_ReqExitRegion = 0x1;
  E_MCGCST_SwitchRegion = 0x2; // 通知玩家切场景。
  E_MCGCST_LoadFinish = 0x3;
  E_MCGCST_OnFighterEnter = 0x4; // 有玩家进入场景。
  E_MCGCST_OnFighterExit = 0x5; // 有玩家退出场景。
  E_MCGCST_UpdateRegionStateInfo = 0x6; // 更新场景状态信息。
  E_MCGCST_RegionInfo = 0x7; // 同步场景信息给玩家。
  E_MCGCST_Conclude = 0x8;

  E_MCGCST_GM = 0x9; // GM
  E_MCGCST_GameDisconnect = 0xa; // 大厅或网关与 GameServer 断开连接。
}

enum EMsgClientMatchCommonSubType
{
        E_MCMCST_Info = 0x0;
        E_MCMCST_SetGameZone = 0x1;
        E_MCMCST_ReqRank = 0x2;
        E_MCMCST_ReqQueueInfo = 0x3;
}

enum EMsgClientAnnouncementSubType
{
        E_MCANNST_Sync = 0x0;
}

// vim: fenc=utf8:expandtab:ts=8
