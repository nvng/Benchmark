syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

import "google/protobuf/any.proto";

import "msg_common.proto";
import "msg_client_common.proto";
import "msg_internal_common.proto";

// package PokerProto;

message MsgRedisCmd
{
  string cmd = 1;
}

message MailInt
{
  sint64 val = 1;
}

message MailUInt
{
  uint64 val = 1;
}

message MailRegionCreateInfo
{
  ERegionType region_type = 1;
  uint64 region_guid = 2;
  sint64 param = 3;
}

message RegionCfg
{
  ERegionType region_type = 1; // 场景类型。

  sint64 player_limit_min = 10; // 人数限制。
  sint64 player_limit_max = 11; // 人数限制。

  sint64 robot_limit_min = 15; // 机器人限制。
  sint64 robot_limit_max = 16; // 机器人限制。

  sint64 robot_req_rate_min = 20; // 机器人请求刷频率(多少秒请求一个)。
  sint64 robot_req_rate_max = 21; // 机器人请求刷频率(多少秒请求一个)。

  sint64 watcher_limit_min = 25; // 旁观人数限制。
  sint64 watcher_limit_max = 26; // 旁观人数限制。

  repeated sint64 region_state_time_limit_list = 30; // 场景状态时限。
  repeated sint64 fighter_state_time_limit_list = 31; // 玩家状态时限。

  repeated sint64 param_1_list = 40; // 自定义参数1
}

message MailReqEnterRegion
{
  ERegionType region_type = 1;
  sint64 old_region_guid = 2;
  sint64 region_guid = 3;

  message MsgReqFighterInfo
  {
    sint64 gate_sid = 1;
    sint64 lobby_sid = 2;

    sint64 player_guid = 3;
    sint64 rank = 4;
    sint64 camp = 5;
    sint64 param = 6;
  }
  repeated MsgReqFighterInfo fighter_list = 10;
}

message MailReqEnterRegionRet
{
  EInternalErrorType error_type = 1;
  uint64 region_guid = 2;
  sint64 game_sid = 3;
}

message MailReqQueue
{
  EInternalErrorType error_type = 1;
  MsgQueueBaseInfo base_info = 2;
  sint64 player_guid = 4;
  sint64 region_guid = 6;
  sint64 game_sid = 7;
  sint64 lobby_sid = 8;
  sint64 gate_sid = 9;
  sint64 param = 10;

  repeated MsgPlayerQueueInfo player_list = 20;
}

message MailResult
{
  EInternalErrorType error_type = 1;
}

message MailReqExit
{
  EInternalErrorType error_type = 1;
  ERegionType region_type = 2;
  uint64 player_guid = 3;
  uint64 region_guid = 4;
}

message MailRegionKickout
{
  EInternalErrorType error_type = 1;
  uint64 region_guid = 2;
  uint64 fighter_guid = 3;
}

message MsgServerInit
{
  sint64 sid = 1;
  sint64 remote_id = 2;
  bool is_crash = 3;
}

message MsgMultiCastInfo
{
  sint64 except = 1;
  map<sint64, bool> id_list = 2;
}

message MailSwitchRegion
{
  ERegionType region_type = 1;
  ERegionType old_region_type = 2;
  sint64 game_sid = 10;
  sint64 region_guid = 11;
}

message MailFighterReconnect
{
  EInternalErrorType error_type = 1;
  ERegionType region_type = 2;
  sint64 region_guid = 3;
  sint64 fighter_guid = 4;
  sint64 game_sid = 5;
  sint64 gate_sid = 6;
}

message MailRegionRelationInfo
{
  sint64 id = 1;
  ERegionType region_type = 2;
  sint64 requestor_id = 3;
  sint64 game_sid = 4;
  sint64 param = 5;

  message MsgFighterInfo
  {
    sint64 id = 1;
    sint64 lobby_sid = 2;
  }

  repeated MsgFighterInfo fighter_list = 10; // 约定，同一 region 的所有 fighter 在同一 requestor 中。
}

message MailPlayerRegionRelationInfo
{
  sint64 player_guid = 1;
  sint64 requestor_id = 2;
  ERegionType region_type = 3;

  message MailRegionInfo
  {
    sint64 id = 1;
    sint64 game_sid = 2;
  }
  MailRegionInfo region_info = 5;
}

message MailSyncPlayerInfo2Region
{
  sint64 player_guid = 1;
  sint64 lv = 2;
  string nick_name = 3;
  string icon = 4;
  sint64 param = 5;

  google.protobuf.Any extra = 10;
}

message MailGameConcludeInfo
{
  ERegionType region_type = 1;
  google.protobuf.Any data = 2;
}

message MailReqRobot
{
  EInternalErrorType error_type = 1;
  sint64 cnt = 2;
  sint64 rank = 3;

  repeated MailSyncPlayerInfo2Region robot_list = 10;
}

message MailBackRobot
{
  EInternalErrorType error_type = 1;
  repeated sint64 robot_list = 2;
}

// vim: fenc=utf8:expandtab:ts=8
