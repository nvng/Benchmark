syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

enum ERegionType
{
  E_RT_None = 0;
  E_RT_MainCity = 1;
  E_RT_PVE = 100;
  E_RT_PVE_1 = 101;
  E_RT_PVE_2 = 102;
  E_RT_PVE_3 = 103;
  E_RT_PVE_4 = 104;
  E_RT_PVE_5 = 105;
  E_RT_PVE_6 = 106;
  E_RT_PVE_7 = 107;
  E_RT_PVE_8 = 108;
  E_RT_PVE_9 = 109;
  E_RT_PVE_10 = 110;
  E_RT_PVE_11 = 111;
  E_RT_PVE_12 = 112;
  E_RT_PVE_13 = 113;
  E_RT_PVE_14 = 114;
  E_RT_PVE_15 = 115;
  E_RT_PVE_16 = 116;
  E_RT_PVE_17 = 117;
  E_RT_PVE_18 = 118;
  E_RT_PVE_19 = 119;
  E_RT_PVE_20 = 120;
  E_RT_PVE_21 = 121;
  E_RT_PVE_22 = 122;
  E_RT_PVE_23 = 123;
  E_RT_PVE_24 = 124;
  E_RT_PVE_25 = 125;
  E_RT_PVE_26 = 126;
  E_RT_PVE_27 = 127;
  E_RT_PVE_28 = 128;
  E_RT_PVE_29 = 129;
  E_RT_PVE_30 = 130;
  E_RT_PVE_31 = 131;
  E_RT_PVE_32 = 132;
  E_RT_PVE_33 = 133;
  E_RT_PVE_34 = 134;
  E_RT_PVE_35 = 135;
  E_RT_PVE_36 = 136;
  E_RT_PVE_37 = 137;
  E_RT_PVE_38 = 138;
  E_RT_PVE_39 = 139;
  E_RT_PVE_40 = 140;
  E_RT_PVE_41 = 141;
  E_RT_PVE_42 = 142;
  E_RT_PVE_43 = 143;
  E_RT_PVE_44 = 144;
  E_RT_PVE_45 = 145;
  E_RT_PVE_46 = 146;
  E_RT_PVE_47 = 147;
  E_RT_PVE_48 = 148;
  E_RT_PVE_49 = 149;
  E_RT_PVE_50 = 150;
  E_RT_PVE_51 = 151;
  E_RT_PVE_52 = 152;
  E_RT_PVE_53 = 153;
  E_RT_PVE_54 = 154;
  E_RT_PVE_55 = 155;
  E_RT_PVE_56 = 156;
  E_RT_PVE_57 = 157;
  E_RT_PVE_58 = 158;
  E_RT_PVE_59 = 159;
  E_RT_PVE_60 = 160;
  E_RT_PVE_61 = 161;
  E_RT_PVE_62 = 162;
  E_RT_PVE_63 = 163;
  E_RT_PVE_64 = 164;
  E_RT_PVE_65 = 165;
  E_RT_PVE_66 = 166;
  E_RT_PVE_67 = 167;
  E_RT_PVE_68 = 168;
  E_RT_PVE_69 = 169;
  E_RT_PVE_70 = 170;
  E_RT_PVE_71 = 171;
  E_RT_PVE_72 = 172;
  E_RT_PVE_73 = 173;
  E_RT_PVE_74 = 174;
  E_RT_PVE_75 = 175;
  E_RT_PVE_76 = 176;
  E_RT_PVE_77 = 177;
  E_RT_PVE_78 = 178;
  E_RT_PVE_79 = 179;
  E_RT_PVE_80 = 180;
  E_RT_PVE_81 = 181;
  E_RT_PVE_82 = 182;
  E_RT_PVE_83 = 183;
  E_RT_PVE_84 = 184;
  E_RT_PVE_85 = 185;
  E_RT_PVE_86 = 186;
  E_RT_PVE_87 = 187;
  E_RT_PVE_88 = 188;
  E_RT_PVE_89 = 189;
  E_RT_PVE_90 = 190;
  E_RT_PVE_91 = 191;
  E_RT_PVE_92 = 192;
  E_RT_PVE_93 = 193;
  E_RT_PVE_94 = 194;
  E_RT_PVE_95 = 195;
  E_RT_PVE_96 = 196;
  E_RT_PVE_97 = 197;
  E_RT_PVE_98 = 198;
  E_RT_PVE_99 = 199;
  E_RT_PVP = 200;
  E_RT_PVP_1 = 201;
  E_RT_PVP_2 = 202;
  E_RT_PVP_3 = 203;
  E_RT_PVP_4 = 204;
  E_RT_PVP_5 = 205;
  E_RT_PVP_6 = 206;
  E_RT_PVP_7 = 207;
  E_RT_PVP_8 = 208;
  E_RT_PVP_9 = 209;
  E_RT_PVP_10 = 210;
  E_RT_PVP_11 = 211;
  E_RT_PVP_12 = 212;
  E_RT_PVP_13 = 213;
  E_RT_PVP_14 = 214;
  E_RT_PVP_15 = 215;
  E_RT_PVP_16 = 216;
  E_RT_PVP_17 = 217;
  E_RT_PVP_18 = 218;
  E_RT_PVP_19 = 219;
  E_RT_PVP_20 = 220;
  E_RT_PVP_21 = 221;
  E_RT_PVP_22 = 222;
  E_RT_PVP_23 = 223;
  E_RT_PVP_24 = 224;
  E_RT_PVP_25 = 225;
  E_RT_PVP_26 = 226;
  E_RT_PVP_27 = 227;
  E_RT_PVP_28 = 228;
  E_RT_PVP_29 = 229;
  E_RT_PVP_30 = 230;
  E_RT_PVP_31 = 231;
  E_RT_PVP_32 = 232;
  E_RT_PVP_33 = 233;
  E_RT_PVP_34 = 234;
  E_RT_PVP_35 = 235;
  E_RT_PVP_36 = 236;
  E_RT_PVP_37 = 237;
  E_RT_PVP_38 = 238;
  E_RT_PVP_39 = 239;
  E_RT_PVP_40 = 240;
  E_RT_PVP_41 = 241;
  E_RT_PVP_42 = 242;
  E_RT_PVP_43 = 243;
  E_RT_PVP_44 = 244;
  E_RT_PVP_45 = 245;
  E_RT_PVP_46 = 246;
  E_RT_PVP_47 = 247;
  E_RT_PVP_48 = 248;
  E_RT_PVP_49 = 249;
  E_RT_PVP_50 = 250;
  E_RT_PVP_51 = 251;
  E_RT_PVP_52 = 252;
  E_RT_PVP_53 = 253;
  E_RT_PVP_54 = 254;
  E_RT_PVP_55 = 255;
  E_RT_PVP_56 = 256;
  E_RT_PVP_57 = 257;
  E_RT_PVP_58 = 258;
  E_RT_PVP_59 = 259;
  E_RT_PVP_60 = 260;
  E_RT_PVP_61 = 261;
  E_RT_PVP_62 = 262;
  E_RT_PVP_63 = 263;
  E_RT_PVP_64 = 264;
  E_RT_PVP_65 = 265;
  E_RT_PVP_66 = 266;
  E_RT_PVP_67 = 267;
  E_RT_PVP_68 = 268;
  E_RT_PVP_69 = 269;
  E_RT_PVP_70 = 270;
  E_RT_PVP_71 = 271;
  E_RT_PVP_72 = 272;
  E_RT_PVP_73 = 273;
  E_RT_PVP_74 = 274;
  E_RT_PVP_75 = 275;
  E_RT_PVP_76 = 276;
  E_RT_PVP_77 = 277;
  E_RT_PVP_78 = 278;
  E_RT_PVP_79 = 279;
  E_RT_PVP_80 = 280;
  E_RT_PVP_81 = 281;
  E_RT_PVP_82 = 282;
  E_RT_PVP_83 = 283;
  E_RT_PVP_84 = 284;
  E_RT_PVP_85 = 285;
  E_RT_PVP_86 = 286;
  E_RT_PVP_87 = 287;
  E_RT_PVP_88 = 288;
  E_RT_PVP_89 = 289;
  E_RT_PVP_90 = 290;
  E_RT_PVP_91 = 291;
  E_RT_PVP_92 = 292;
  E_RT_PVP_93 = 293;
  E_RT_PVP_94 = 294;
  E_RT_PVP_95 = 295;
  E_RT_PVP_96 = 296;
  E_RT_PVP_97 = 297;
  E_RT_PVP_98 = 298;
  E_RT_PVP_99 = 299;
  E_RT_MaxLimit = 999; // 最大限制，有地方将其作为ID。
}

enum EPinZhiType
{
  E_PZT_None = 0;
  E_PZT_Bai = 1;
  E_PZT_Lan = 2;
  E_PZT_Zhi = 3;
  E_PZT_Cheng = 4;
}

message MsgGoodsItem
{
  sint64 type = 1;
  sint64 id = 2;
  sint64 num = 3;
}

// vim: fenc=utf8:expandtab:ts=8
