syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

// import "msg_common.proto";

enum EInternalErrorType
{
  E_IET_None = 0x0; // 0 不能作为有效值，ByteSize 为 0。
  E_IET_Success = 0x1;
  E_IET_Fail = 0x2;
  E_IET_FromIsNull = 0x3;
  E_IET_CallTimeOut = 0x4;
  E_IET_ParamError = 0x5;
  E_IET_RemoteCrash = 0x6;

  E_IET_RegionCreateTimeout = 0x10;
  E_IET_RegionCreateAlreadyExist = 0x11;
  E_IET_EnterRegionError = 0x12;
  E_IET_GameSesAlreadyRelease = 0x13;
  E_IET_GateSesAlreadyRelease = 0x14;
  E_IET_LobbySesAlreadyRelease = 0x15;
  E_IET_RegionLoadFighterFail = 0x16;
  E_IET_ReqEnterRegionTimeout = 0x17;
  E_IET_RegionCannotExit = 0x18;
  E_IET_RegionCreateError = 0x19;
  E_IET_RegionNotFound = 0x1a;
  E_IET_RegionMgrNotFound = 0x1b;
  E_IET_FighterNotFound = 0x1c;
  E_IET_FighterInitFromLobbyFail = 0x1d;

  E_IET_DBDataSIDError = 0x20;
  E_IET_DBDataDelete = 0x21;

  E_IET_FighterClientError = 0x30;
  E_IET_GateNotFound = 0x31;
}

// vim: fenc=utf8:expandtab:ts=8
