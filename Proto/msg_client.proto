syntax = "proto3";

option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE; // SerializeToArray 比 LITE_RUNTIME 慢
// option optimize_for = SPEED; // 默认

/*
   optimize for CODE_SIZE does not generate fast accessor
   methods for everything, but relies on slow reflection,

   optimize for SPEED will give you the fast accessors

   and optimize for LITE_RUNTIME will also give you fast accessors,
   but does not support the full functionality of protobuf, but only 
   the lighter subset protobuf-lite. Basically, this means descriptors
   or reflection are not available.
 */

// package PokerProto;

import "msg_common.proto";
import "msg_client_common.proto";
import "msg_mail.proto";
import "msg_shop.proto";
import "msg_achievement.proto";
import "msg_activity.proto";

message MsgClientHeartBeat
{
  sint64 server_time = 1;
}

message MsgClientLogin
{
  sint64 player_guid = 1;
  string nick_name = 2;
  string icon = 3;

  sint64 app_id = 10;
  sint64 platform = 11;
  sint64 user_id = 12;
}

message MsgPlayerInfo
{
  sint64 player_guid = 1;
  string nick_name = 2;
  string icon = 3;
  string we_chat_icon = 4;
  repeated sint64 icon_idx_list = 5;
  repeated sint64 attr_list = 6;
  repeated sint64 cdkey_list = 7;

  MsgQueueInfo queue_info = 10;
  MsgMatchInfo match_info = 11;
  repeated MsgPlayerChange player_change_list = 12;
  sint64 server_day_zero_timestamp = 13;
  sint64 server_weak_zero_timestamp = 14;
  sint64 server_time_zero = 15;

  repeated MsgGoodsItem goods_list = 30;
  MsgPlayerMailSysBrief mail = 31;
  MsgPlayerGameSeasonInfo game_season = 32;
  MsgShopMgr shop_mgr = 33;
  MsgADMgr ad_mgr = 34;
  MsgVIPMgr vip_mgr = 35;
  MsgHeroMgr hero_mgr = 36;
  MsgAchievementMgr achievement_mgr = 37;
  MsgActivityMgr activity_mgr = 38;
  repeated MsgBagBufInfoList bag_buf_list = 39;
}

message MsgDataResetNoneZero
{
  MsgPlayerChange player_change = 10;
}

message MsgClientLoginRet
{
  EClientErrorType error_type = 1;
  MsgPlayerInfo player_info = 2;
}

message MsgCommitLocation
{
  EClientErrorType error_type = 1;
  sint64 val = 2;
}

message MsgMatchSetGameZone
{
        EClientErrorType error_type = 1;
        sint64 val = 2;
}

message MsgMatchInfo
{
        sint64 cfg_id = 1;
        sint64 cur_round = 2;
        sint64 prompotion_cnt = 3;
        sint64 left_region_cnt = 4;
        sint64 next_round_start_time = 5;
}

message MsgMatchQueueInfo
{
        EQueueType queue_type = 1;

        message MsgInfo
        {
                sint64 cfg_id = 1;
                sint64 player_cnt = 2;
        }
        repeated MsgInfo info_list = 10;
}

message MsgClientKickout
{
  EClientErrorType error_type = 1;
}

message MsgSwitchRegion
{
  ERegionType region_type = 1;
  ERegionType old_region_type = 2;
  EClientErrorType error_type = 3;
}

message MsgLoadFinish
{
  ERegionType region_type = 1;
  sint64 player_guid = 2;
}

message MsgReqEnterRegion
{
  EClientErrorType error_type = 1;
  ERegionType region_type = 2;
  sint64 region_id = 3;
  sint64 param = 4;
}

// {{{ Queue

message MsgQueueInfo
{
  MsgQueueBaseInfo base_info = 1;
  sint64 param = 5;
  repeated MsgPlayerQueueInfo player_list = 6;
}

message MsgSyncQueueInfo
{
  MsgQueueBaseInfo base_info = 1;
  sint64 param = 2;
  sint64 param_1 = 3;
  sint64 param_2 = 4;
  repeated MsgPlayerQueueInfo player_list = 5;
}

message MsgReqQueue
{
  EClientErrorType error_type = 1;
  MsgQueueBaseInfo base_info = 2;
  sint64 param = 3;
  sint64 param_1 = 4;
  sint64 guid = 5;

  MsgPlayerChange player_change = 10;
}

message MsgExitQueue
{
  EClientErrorType error_type = 1;
  MsgQueueBaseInfo base_info = 2;
  sint64 player_guid = 3;
  sint64 guid = 4;

  MsgPlayerChange player_change = 10;
}

enum EQueueOptType
{
  E_QOT_None = 0x0;
  E_QOT_SetMap = 0x1;
  E_QOT_SetHero = 0x2;
  E_QOT_Offline = 0x3;
  E_QOT_Kickout = 0x4;
  E_QOT_Ready = 0x5;
  E_QOT_Start = 0x6;
}

message MsgQueueOpt
{
  EClientErrorType error_type = 1;
  MsgQueueBaseInfo base_info = 2;
  EQueueOptType opt_type = 3;
  sint64 param = 4;
  sint64 player_guid = 5;
}

message MsgReqQueueList
{
        EClientErrorType error_type = 1;
        ERegionType region_type = 2;
        EQueueType queue_type = 3;
        sint64 queue_guid = 4;
        sint64 player_guid = 5;

        repeated MsgQueueInfo queue_list = 10;
}

// }}}

message MsgResult
{
  EClientErrorType error_type = 1;
}

message MsgFighterExit
{
  ERegionType region_type = 1;
  sint64 region_id = 2;
  sint64 fighter_guid = 3;
}

message MsgGameGM
{
  string cmd = 1;
}

message MsgLobbyGM
{
  string cmd = 1;
}

// {{{ game season
message DBGameSeasonInfo
{
  sint64 season = 10;

  sint64 lv = 20;
  sint64 star = 30;
  sint64 score = 40;

  sint64 show_lv = 50;
  sint64 show_star = 60;

  sint64 max_lv = 70;
  sint64 max_star = 80;

  sint64 cur_max_lv = 90;
  sint64 cur_max_star = 100;

  sint64 cur_season = 110;
  bool already_reward = 120;
  sint64 reward_version = 200;
  repeated sint64 reward_list = 210;
  repeated sint64 segment_level_reward_list = 220;
  MsgGameSeasonBattleStatisticsInfo cur_info = 230;
  MsgGameSeasonBattleStatisticsInfo total_info = 240;
  sint64 pve_end_less_score = 250;
}

message MsgReqPlayerGameSeasonInfo
{
  EClientErrorType error_type = 1;
  MsgPlayerChange player_change = 10;
}

message MsgGameSeasonJourneyReward
{
  EClientErrorType error_type = 1;
  sint64 lv = 2;

  MsgPlayerChange player_change = 10;
}

message MsgSegmentLevelReward
{
  EClientErrorType error_type = 1;
  sint64 lv = 2;

  MsgPlayerChange player_change = 10;
}

message MsgGameSeasonReward
{
  EClientErrorType error_type = 1;
  MsgPlayerChange player_change = 10;
}

// }}}

enum EVIPAttrType
{
  E_VIP_AT_Reward = 0x0;
  E_VIP_AT_RankGameCoinsAddRatio = 0x1; // 比赛金币加成。
  E_VIP_AT_RankGameExpAddRatio = 0x2; // 比赛经验加成。
  E_VIP_AT_GameGoodsCnt = 0x3; // 额外道具栏数量。
  E_VIP_AT_Hero = 0x4; // 专属角色。
  E_VIP_AT_Head = 0x5; // 专属头像。
  E_VIP_AT_HeadFrame = 0x6; // 专属头像框。
  E_VIP_AT_PiFu = 0x7; // 专属道具皮肤。
  E_VIP_AT_RankGameAvoidDecScore = 0x8; // 排位额外免扣分次数。
  E_VIP_AT_RankGameAddScoreDailyCnt = 0x9; // 排位赛额外加成场次。
  E_VIP_AT_RankGameAddScore = 0xa; // 排位赛额外加成积分。
  E_VIP_AT_AD = 0xb; // 免广告领奖。
  E_VIP_AT_GameEnergyBar = 0xc; // 是否有蓄力条。
}

message MsgVIPReward
{
  EClientErrorType error_type = 1;
  sint64 cfg_id = 2;
  sint64 idx = 3;

  MsgPlayerChange player_change = 10;
}

message MsgBagUse
{
  EClientErrorType error_type = 1;
  sint64 id = 2;
  sint64 cnt = 3;

  MsgPlayerChange player_change = 10;
}

message MsgBagRemove
{
  EClientErrorType error_type = 1;
  EBagBuffType type = 2;
  sint64 id = 3;

  MsgPlayerChange player_change = 10;
}

message MsgBagSelect
{
  EClientErrorType error_type = 1;
  EBagBuffType type = 2;
  sint64 id = 3;

  MsgPlayerChange player_change = 10;
}

message MsgChangeNickName
{
  EClientErrorType error_type = 1;
  string nick_name = 2;

  MsgPlayerChange player_change = 10;
}

message MsgChangeIcon
{
  EClientErrorType error_type = 1;
  string icon = 2;
}

message MsgChangeIconFrame
{
  EClientErrorType error_type = 1;
  sint64 icon_frame_idx = 2;
}

message MsgSyncIcon
{
  EClientErrorType error_type = 1;
  string icon = 2;
}

message MsgTestTime
{
  sint64 client_time = 1;
  sint64 server_time = 2;
}

message MsgAnnouncementList
{
        EClientErrorType error_type = 10;

        message MsgAnnouncementItem
        {
                sint64 guid = 10;
                string data = 20;
        }
        map<sint64, MsgAnnouncementItem> item_list = 20;
}

// vim: fenc=utf8:expandtab:ts=8
